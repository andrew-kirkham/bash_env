#!/bin/bash
# Bash prompt support for git that is much more targeted
#
# This requires unicode support in the terminal. Every status icon 
# is a unicode character
#
# This will automatically check if the user is in a repo
# If they are not, this will not display anything
#
# Assumptions:
#   The remote is always named origin
#   You are not rebasing
#   This is called on every PS1 prompt set
#
# Will display: 
#   The commits ahead/behind origin (marked by up or down arrow, checkmark indicates they are equal)
#   The number of untracked files (marked by a ?)
#   The number of added/modified/deleted files (marked by a hammer)
#
# Example:
#   (master ↑2⚒1?3) - 2 commits ahead, 1 modified file, 3 untracked files
#
# TODO:
#   conflicted marker

COMMITS_AHEAD_MARKER="↑"
COMMITS_BEHIND_MARKER="↓"
COMMITS_EQUAL_MARKER="✓"
UNTRACKED_MARKER="?"
STAGED_MARKER="⚒"
UNSTAGED_MARKER="✘"

commit_status() {
    ahead="$(git rev-list --count origin..HEAD)"
    behind="$(git rev-list --count HEAD..origin)"
    commits=""

    if [[ $ahead -ne "0" ]]; then
        commits="${COMMITS_AHEAD_MARKER}${ahead}"
    fi
    if [[ $behind -ne "0" ]]; then
        commits="${commits}${COMMITS_BEHIND_MARKER}${behind}"
    fi
    if [[ $commits == "" ]]; then
        commits=$COMMITS_EQUAL_MARKER
    fi
}

working_tree_status() {
    untracked=0
    staged=0
    unstaged=0
    IFS=$'\n' 
    mods="$(git status --porcelain)"
    for file in ${mods}; do
        if [[ $file =~ ^(??) ]];then
            let untracked+=1
        fi
        if [[ $file =~ ^A ]] || #add
            [[ $file =~ ^D ]] || #delete
            [[ $file =~ ^R ]] || #rename
            [[ $file =~ ^M ]]; then #modify
            let staged+=1
        fi
        if [[ $file =~ ^( D) ]] || #unstaged delete
            [[ $file =~ ^( M) ]]; then #unstaged modify
            let unstaged+=1
        fi
    done
    working_tree=""
    if [[ $untracked -ne "0" ]]; then
        working_tree="${working_tree}${UNTRACKED_MARKER}${untracked}"
    fi
    if [[ $staged -ne "0" ]]; then
        working_tree="${working_tree}${STAGED_MARKER}${staged}"
    fi
    if [[ $unstaged -ne "0" ]]; then
        working_tree="${working_tree}${UNSTAGED_MARKER}${unstaged}"
    fi
}

is_a_repo="$(git rev-parse --git-dir --is-inside-git-dir \
    --is-bare-repository --is-inside-work-tree 2>/dev/null)"
if [ -z "$is_a_repo" ]; then
    GIT_PROMPT=""
    return $exit
fi

#fetch so the downstream can be correct
(git fetch -q --all & > /dev/null 2>&1)

branch="$(git rev-parse --abbrev-ref HEAD)"
commit_status
working_tree_status

GIT_PROMPT="($branch $commits$working_tree)"
